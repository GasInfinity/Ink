using System.Collections.Immutable;
using Ink.SourceGenerator.Util;

namespace Ink.SourceGenerator.Block;

public sealed class PropertyNamesStore
{
    private readonly List<ImmutableArray<string>> knownNames = new(); 
    
    public void WriteTo(IndentingStringBuilder builder)
    {
        builder.WriteLine($$"""
                // <auto-generated />
                using System.Collections.Frozen;

                namespace Ink.Blocks.State;

                public static class {{nameof(PropertyNamesStore)}}
                """); 

        using(builder.EnterBlock())
        {
            for(int i = 0; i < this.knownNames.Count; ++i)
            {
                ImmutableArray<string> names = this.knownNames[i];

                builder.Write($"public static readonly FrozenDictionary<string, int> CachedNames{i} = (new Dictionary<string, int>() {{ ");
                for(int j = 0; j < names.Length; ++j) 
                {
                    builder.Write($"{{ \"{names[j]}\", {j} }}"); 

                    if(j != names.Length - 1)
                        builder.Write(", ");
                }
                builder.WriteLine($" }}).ToFrozenDictionary();");
            }
        }
    }

    public int Add(IEnumerable<string> names)
    {
        int foundIndex = knownNames.FindIndex(0, kn => kn.SequenceEqual(names));

        if(foundIndex == -1)
        {
            knownNames.Add(names.ToImmutableArray());
            foundIndex = knownNames.Count - 1;
        }

        return foundIndex;
    }
}
